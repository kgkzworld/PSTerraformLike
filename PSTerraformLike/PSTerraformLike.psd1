#
# Module manifest for module 'PSTerraformLike'
#
# Generated by: Michael Arroyo
#
# Generated on: 11/29/2023
#

@{

# Script module or binary module file associated with this manifest.
RootModule = 'PSTerraformLike.psm1'

# Version number of this module.
ModuleVersion = '1.0.0.20231129'

# Supported PSEditions
# CompatiblePSEditions = @()

# ID used to uniquely identify this module
GUID = '01baf1a8-9fa7-4c0d-90c9-e6f816a18bd9'

# Author of this module
Author = 'Michael Arroyo'

# Company or vendor of this module
CompanyName = 'N/A'

# Copyright statement for this module
Copyright = '(c) 2023 Michael Arroyo. All rights reserved.'

# Description of the functionality provided by this module
Description = 'PSTerraformLike offers a streamlined experience for creating and managing DSC configurations.
It allows you to easily convert any PowerShell function into a DSC resource, making it highly extensible and adaptable to your specific needs.

    KEY FEATURES:
    - Easier to Use: PSTerraformLike simplifies the process of working with DSC by providing a more intuitive and user-friendly interface.
        It eliminates the complexities often associated with traditional DSC frameworks, allowing you to focus on writing declarative code.

    - Extensibility: With PSTerraformLike, you can create DSC resources from any PowerShell function,
        giving you the flexibility to leverage existing code and extend the capabilities of your DSC configurations.

    - Standardization: PSTerraformLike promotes standardization by enforcing a consistent structure and format for DSC configurations.
        This ensures that your configurations are easily understandable and maintainable, even in large-scale environments.

    - Declarative Coding: By using PSTerraformLike, you can write DSC configurations in a declarative manner,
        specifying the desired state of your systems rather than writing procedural scripts. This approach simplifies the management of
        configuration drift and promotes consistency across your infrastructure.

    - Source Control: PSTerraformLike integrates seamlessly with source control systems, allowing you to version and track changes to your
        DSC configurations. This enables collaboration, auditability, and the ability to roll back to previous configurations if needed.

    - Change Detection with Runbooks: PSTerraformLike provides built-in functionality to detect changes in your DSC configurations.
        By utilizing runbooks, you can easily identify and remediate any configuration drift, ensuring that your systems remain in the desired state.

    - System Checks and Remediation: PSTerraformLike offers a convenient way to perform system checks and flag remediation tasks within
        your runbooks or through the command-line interface (CLI). This simplifies the process of verifying system compliance and automating
        remediation actions.

    - Logging: PSTerraformLike offers built-in logging functionality that allows you to easily track changes to your DSC configurations.

    - Easy to Use Format: PSTerraformLike supports YAML as an easy-to-use format for defining runbook and DSC configurations.
        This allows you to leverage the simplicity and readability of YAML while benefiting from the power and flexibility of PSTerraformLike.'

# Minimum version of the Windows PowerShell engine required by this module
# PowerShellVersion = ''

# Name of the Windows PowerShell host required by this module
# PowerShellHostName = ''

# Minimum version of the Windows PowerShell host required by this module
# PowerShellHostVersion = ''

# Minimum version of Microsoft .NET Framework required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
# DotNetFrameworkVersion = ''

# Minimum version of the common language runtime (CLR) required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
# CLRVersion = ''

# Processor architecture (None, X86, Amd64) required by this module
# ProcessorArchitecture = ''

# Modules that must be imported into the global environment prior to importing this module
RequiredModules = @(@{ModuleName="powershell-yaml"; RequiredVersion="0.4.7"; GUID="6a75a662-7f53-425a-9777-ee61284407da"},@{ModuleName="Pester"; RequiredVersion="4.10.1"; GUID="a699dea5-2c73-4616-a270-1f7abb777e71"})

# Assemblies that must be loaded prior to importing this module
# RequiredAssemblies = @()

# Script files (.ps1) that are run in the caller's environment prior to importing this module.
# ScriptsToProcess = @()

# Type files (.ps1xml) to be loaded when importing this module
# TypesToProcess = @()

# Format files (.ps1xml) to be loaded when importing this module
# FormatsToProcess = @()

# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess
# NestedModules = @()

# Functions to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no functions to export.
FunctionsToExport = 'ConvertTo-PSTerraformLikeAction','New-PSTerraformLikeDSC','New-PSTerraformLikeRunBook','Confirm-PSTerraformLikeActionList','Invoke-PSTerraformLikeDSC','Invoke-PSTerraformLikeRunBook'

# Cmdlets to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no cmdlets to export.
CmdletsToExport = @()

# Variables to export from this module
VariablesToExport = '*'

# Aliases to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no aliases to export.
AliasesToExport = 'ConvertTo-TFLA','TFLA','New-TFLDSC','TFLNDSC','New-TFLRB','TFLNRB','Confirm-TFLAL','TFLAL','Invoke-TFLDSC','TFLIDSC','Invoke-TFLRB','TFLIRB'

# DSC resources to export from this module
# DscResourcesToExport = @()

# List of all modules packaged with this module
# ModuleList = @()

# List of all files packaged with this module
# FileList = @()

# Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell.
PrivateData = @{

    PSData = @{

        # Tags applied to this module. These help with module discovery in online galleries.
        # Tags = @()

        # A URL to the license for this module.
        # LicenseUri = ''

        # A URL to the main website for this project.
        # ProjectUri = ''

        # A URL to an icon representing this module.
        # IconUri = ''

        # ReleaseNotes of this module
        # ReleaseNotes = ''

        # Prerelease string of this module
        # Prerelease = ''

        # Flag to indicate whether the module requires explicit user acceptance for install/update/save
        # RequireLicenseAcceptance = $false

        # External dependent modules of this module
        # ExternalModuleDependencies = @()

    } # End of PSData hashtable

} # End of PrivateData hashtable

# HelpInfo URI of this module
# HelpInfoURI = ''

# Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.
# DefaultCommandPrefix = ''

}